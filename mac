#!/bin/bash

# The Metanorma macOS Setup script

fancy_echo() {
  # shellcheck disable=SC2039
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

append_to_file() {
  # shellcheck disable=SC2039
  local file="$1"
  # shellcheck disable=SC2039
  local text="$2"

  if [ "$file" = "$HOME/.bash_profile" ]; then
    file="$HOME/.bash_profile"
  fi

  if ! grep -qs "^$text$" "$file"; then
    printf "\n%s\n" "$text" >> "$file"
  fi
}

create_bash_profile_and_set_it_as_shell_file() {
  if [ ! -f "$HOME/.bash_profile" ]; then
    touch "$HOME/.bash_profile"
  fi

  shell_file="$HOME/.bash_profile"
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

case "$SHELL" in
*)
    create_bash_profile_and_set_it_as_shell_file
esac

brew_is_installed() {
  brew list -1 | grep -Fqx "$1"
}

tap_is_installed() {
  brew tap -1 | grep -Fqx "$1"
}

gem_install_or_update() {
  if gem list "$1" | grep "^$1 ("; then
    fancy_echo "Updating %s ..." "$1"
    gem update "$@"
  else
    fancy_echo "Installing %s ..." "$1"
    gem install "$@"
  fi
}

app_is_installed() {
  # shellcheck disable=SC2039
  local app_name
  app_name=$(echo "$1" | cut -d'-' -f1)
  find /Applications -iname "$app_name*" -maxdepth 1 | egrep '.*' > /dev/null
}

latest_installed_ruby() {
  find "$HOME/.rubies" -maxdepth 1 -name 'ruby-*' | tail -n1 | egrep -o '\d+\.\d+\.\d+'
}

switch_to_latest_ruby() {
  # shellcheck disable=SC1091
  . /usr/local/share/chruby/chruby.sh
  chruby "ruby-$(latest_installed_ruby)"
}

append_to_file "$shell_file" "alias metanorma-setup='bash <(curl -s https://raw.githubusercontent.com/riboseinc/metanorma-macos-setup/master/metanorma-setup)'"

# shellcheck disable=SC2016
append_to_file "$shell_file" 'export PATH="$HOME/.bin:$PATH"'

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    # shellcheck disable=SC2016
    append_to_file "$shell_file" 'export PATH="/usr/local/bin:$PATH"'
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

# Remove brew-cask since it is now installed as part of brew tap caskroom/cask.
# See https://github.com/caskroom/homebrew-cask/releases/tag/v0.60.0
if brew_is_installed 'brew-cask'; then
  brew uninstall --force 'brew-cask'
fi

if tap_is_installed 'caskroom/versions'; then
  brew untap caskroom/versions
fi

fancy_echo "Updating Homebrew..."
brew update

fancy_echo "Verifying the Homebrew installation..."
if brew doctor; then
  fancy_echo "Your Homebrew installation is good to go."
else
  fancy_echo "Your Homebrew installation reported some errors or warnings."
  echo "If the warnings are related to Python, you can ignore them."
  echo "Otherwise, review the Homebrew messages to see if any action is needed."
fi

# install Java if it's not already there
if ! [ -x "$(command -v java)" ]; then
  brew cask install java
fi

fancy_echo "Installing formulas and casks from the Brewfile ..."
if brew bundle --file="$HOME/Brewfile"; then
  fancy_echo "All formulas and casks were installed successfully."
else
  fancy_echo "Some formulas or casks failed to install."
  echo "This is usually due to one of the Mac apps being already installed,"
  echo "in which case, you can ignore these errors."
fi

# shellcheck disable=SC2016

fancy_echo '[node] Checking on Node.js installation...'

if ! command -v nvm > /dev/null; then

  if brew_is_installed "node"; then
    fancy_echo "
[node] We recommend you uninstall brew's Node and re-install Node through nvm.
[node] You can re-run this script after uninstalling brew's Node to automatically install nvm.
"

  elif command -v n > /dev/null; then
    fancy_echo "
[node] We recommend using \`nvm\` and not \`n\`.
[node] See https://pages.18f.gov/frontend/#install-npm
[node] You can re-run this script after uninstalling \`n\` to automatically install nvm.
"

  else

    fancy_echo '[node] Installing nvm and lts Node.js and npm...'
    brew bundle --file=- <<EOF
    brew 'nvm'
EOF
    append_to_file "$shell_file" 'export NVM_DIR="$HOME/.nvm"'
    append_to_file "$shell_file" 'source /usr/local/opt/nvm/nvm.sh'

    export NVM_DIR="$HOME/.nvm"
    [ ! -x "$NVM_DIR" ] && mkdir "$NVM_DIR"
    source /usr/local/opt/nvm/nvm.sh

    nvm install node --lts
  fi

else
  fancy_echo '[node] version manager detected.  Skipping...'
fi

if npm list -g --depth 0 | \grep [p]uppeteer > /dev/null 2>&1; then
  fancy_echo '[node: puppeteer] Puppeteer already installed.'
else
  fancy_echo '[node: puppeteer] Installing puppeteer...'
  npm install -g --save --save-exact puppeteer
fi

fancy_echo '[node] ...Finished Node.js installation checks.'

fancy_echo '[java] Checking on Java installation...'

if command -v java >/dev/null; then
  fancy_echo '[java] Java is already installed.'
else

  fancy_echo '[java] Installing \`jenv\`'
  brew bundle --file=- <<EOF
  brew 'jenv'
EOF

  append_to_file "$shell_file" 'export PATH="$HOME/.jenv/bin:$PATH"'
  append_to_file "$shell_file" 'eval "$(jenv init -)"'

  export PATH="$HOME/.jenv/bin:$PATH"
  eval "$(jenv init -)"

  new_java_home = "$(dirname $(readlink $(which javac)))/java_home"
  fancy_echo '[java] Adding ${new_java_home} to \`jenv\`'
  jenv add $(dirname $(readlink $(which javac)))/java_home
fi


fancy_echo '[ruby] Checking on Ruby installation...'

append_to_file "$HOME/.gemrc" 'gem: --no-document'

if command -v rbenv >/dev/null || command -v rvm >/dev/null; then
  fancy_echo '[ruby] We recommend chruby and ruby-install over RVM or rbenv'
else
  if ! brew_is_installed "chruby"; then
    fancy_echo '[ruby] Installing chruby, ruby-install, and the latest Ruby...'

    brew bundle --file=- <<EOF
    brew 'chruby'
    brew 'ruby-install'
EOF

    append_to_file "$shell_file" 'source /usr/local/share/chruby/chruby.sh'
    append_to_file "$shell_file" 'source /usr/local/share/chruby/auto.sh'

    ruby-install ruby

    append_to_file "$shell_file" "chruby ruby-$(latest_installed_ruby)"

    switch_to_latest_ruby
  else
    brew bundle --file=- <<EOF
    brew 'chruby'
    brew 'ruby-install'
EOF
    fancy_echo '[ruby] Checking if a newer version of Ruby is available...'
    switch_to_latest_ruby

    ruby-install --latest > /dev/null
    latest_stable_ruby="$(cat < "$HOME/.cache/ruby-install/ruby/stable.txt" | tail -n1)"

    if ! [ "$latest_stable_ruby" = "$(latest_installed_ruby)" ]; then
      fancy_echo "[ruby] Installing latest stable Ruby version: $latest_stable_ruby"
      ruby-install ruby
    else
      fancy_echo '[ruby] You have the latest version of Ruby'
    fi
  fi
fi

fancy_echo '[ruby] Updating Rubygems...'
gem update --system

gem_install_or_update 'bundler'

fancy_echo "[ruby] Configuring Bundler ..."
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

fancy_echo '[ruby] ...Finished Ruby installation checks.'

# asciidoctor depends on Java

fancy_echo '[metanorma] Installing/Updating the `metanorma` gem...'
gem_install_or_update 'metanorma'

fancy_echo '[metanorma-setup] Completed -- please re-launch Terminal!'
